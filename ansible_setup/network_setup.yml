---
- name: Configure Wi-Fi & Access Point
  hosts: my_hosts
  become: yes
  remote_user: ww
  gather_facts: yes
  any_errors_fatal: true


  tasks:
    # Load network variables from the file
    - name: Include network variables
      include_vars:
        file: ../network.conf
        name: network
      tags: [ ethernet, wifi_access_point ]

    # # Configure ethernet network to dhcp + static
    # - name: Configure ethernet
    #   shell: >
    #     nmcli connection modify "Wired connection 1" ipv4.addresses {{ network.eth_static_ip }}/24;
    #     nmcli con modify "Wired connection 1" ipv4.method manual;
    #     nmcli con modify "Wired connection 1" connection.autoconnect yes
    #   tags: ethernet


    # Disable NetworkManager control over eth0
    - name: Disable NetworkManager control over eth0
      ansible.builtin.lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        regexp: "^unmanaged-devices="
        line: "unmanaged-devices=interface-name:eth0"
        insertafter: '^\\[keyfile\\]'
      tags: ethernet

    # Configure /etc/network/interfaces.d/eth0
    - name: Configure /etc/network/interfaces.d/eth0
      ansible.builtin.template:
        src: eth0.j2
        dest: /etc/network/interfaces.d/eth0
        owner: root
        group: root
        mode: 0644
      tags: ethernet

    # Configure NetworkManager
    - name: Configure NetworkManager
      template:
        src: networkmanager.conf.j2
        dest: /etc/NetworkManager/NetworkManager.conf
        owner: root
        group: root
        mode: 0644
      # notify: Restart NetworkManager
      tags: ethernet


    # Update apt cache
    - name: Update apt cache
      apt:
        update_cache: yes

    # Wi-Fi and Access Point Setup
    # Install required packages for Wi-Fi and Access Point
    - name: Install required packages for Wi-Fi and Access Point
      apt:
        name:
          - vim
          - liblo-tools
          - network-manager
          - hostapd
          - dnsmasq
          - isc-dhcp-client
        state: present
      tags: wifi_access_point

    - name: Download and install Tailscale
      shell: |
        curl -fsSL https://tailscale.com/install.sh | sh
      
    - name: Configure Static IP on WLAN0
      template:
        src: wlan0.j2
        dest: /etc/network/interfaces.d/wlan0
        owner: root
        group: root
        mode: 0644
      # notify: Restart networking
      tags: wifi_access_point

    # Configure hostapd
    - name: Configure hostapd
      template:
        src: hostapd.conf.j2
        dest: /etc/hostapd/hostapd.conf
        owner: root
        group: root
        mode: 0644
      # notify: Restart hostapd
      tags: wifi_access_point

    - name: Disable hostapd service
      systemd:
        name: hostapd
        enabled: no
      tags: wifi_access_point

    # Configure dnsmasq
    - name: Configure dnsmasq
      template:
        src: dnsmasq.conf.j2
        dest: /etc/dnsmasq.conf
        owner: root
        group: root
        mode: 0644
      notify: Restart dnsmasq
      tags: wifi_access_point

    # Ensure that the dnsmasq service is enabled
    - name: Enable dnsmasq service
      systemd:
        name: dnsmasq
        enabled: yes
      tags: wifi_access_point

    - name: Create connectivity check script
      template:
        src: connectivity-check.sh.j2
        dest: /usr/local/bin/connectivity-check.sh
        owner: root
        group: root
        mode: 0755
      tags: wifi_access_point

    - name: Run connectivity check script periodically
      cron:
        name: Run connectivity check
        minute: "*/1"   # Run every 1 minutes
        job: /usr/local/bin/connectivity-check.sh
        user: root
      tags: wifi_access_point

    - name: Update /etc/hostname
      ansible.builtin.copy:
        dest: /etc/hostname
        content: "{{ avahi_hostname }}"
        owner: root
        group: root
        mode: 0644

    - name: Get current hostname from /etc/hosts
      ansible.builtin.command: awk '/^127\.0\.1\.1\s/ {print $2}' /etc/hosts
      register: current_hostname

    - name: Remove existing entry with current_hostname in /etc/hosts
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1.*{{ current_hostname.stdout }}$"
        state: absent

    - name: Add new entry with avahi_hostname in /etc/hosts if not exists
      ansible.builtin.lineinfile:
        path: /etc/hosts
        regexp: "^127.0.1.1.*{{ avahi_hostname }}$"
        line: "127.0.1.1   {{ avahi_hostname }}"
        state: present
        insertafter: "^127\\.0\\.0\\.1.*"
        owner: root
        group: root
        mode: 0644

    # Avahi Configuration
    - name: Install Avahi Daemon
      apt:
        name: ['avahi-daemon']
        state: present
      tags: mdns

    - name: Ensure Avahi service is running
      service:
        name: avahi-daemon
        state: started
        enabled: yes
      tags: mdns

    - name: Set up Avahi to respond to a specific hostname
      lineinfile:
        path: /etc/avahi/avahi-daemon.conf
        regexp: '^#host-name='
        line: 'host-name={{ avahi_hostname }}'
        state: present
        mode: '0644'
      tags: mdns

    - name: Ensure 'allow-interfaces=eth0' stays commented out
      lineinfile:
        path: /etc/avahi/avahi-daemon.conf
        regexp: '^allow-interfaces=eth0'
        line: '#allow-interfaces=eth0'
        state: present
        mode: '0644'

    - name: Add 'allow-interfaces=wlan0' line to the config file
      lineinfile:
        path: /etc/avahi/avahi-daemon.conf
        regexp: '^allow-interfaces=wlan0'
        line: 'allow-interfaces=wlan0'
        insertafter: '^#allow-interfaces=eth0'
        state: present
        mode: '0644'

    - name: Restart Avahi to apply the changes
      systemd:
        name: avahi-daemon
        state: restarted
      tags: mdns

  handlers:
    - name: Restart NetworkManager
      service:
        name: NetworkManager
        state: restarted
      listen: Restart NetworkManager

    - name: Restart hostapd
      systemd:
        name: hostapd
        state: restarted

    - name: Restart dnsmasq
      systemd:
        name: dnsmasq
        state: restarted
      listen: Restart dnsmasq
    
    - name: Restart networking
      systemd:
        name: networking
        state: restarted
      listen: Restart networking

